#file: noinspection YAMLSchemaValidation
version: 2.1

jobs:
  setup-tools:
    docker:
      - image: cimg/android:2023.09
    environment:
      ANDROID_SDK_ROOT: /home/circleci/android-sdk
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
    steps:
      - run:
          name: Clone repository
          command: |
            git clone --branch circleci https://github.com/SebastianAMo/appium-course-qaconf.git .

      - run:
          name: Install Node and Appium
          command: |
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g appium

      - run:
          name: Check tools
          command: |
            echo "Java version"
            java -version
            echo "Node version"
            node -v
            echo "Appium version"
            appium -v
            echo "Gradle version"
            gradle -v
            echo "ADB version"
            adb version
            echo "Emulator version"
            emulator -version || true

      - run:
          name: Instalar imagen del sistema Android 30
          command: |
            export JAVA_OPTS="-Djavax.xml.accessExternalSchema=all"
            echo "Instalando imagen: system-images;android-30;google_apis;x86"
            yes | /home/circleci/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/home/circleci/android-sdk --no_https "system-images;android-30;google_apis;x86" || true

      - run:
          name: Start and init test
          command: |
            echo "Creating AVD 'test-emulator'"
            echo "no" | avdmanager create avd -n test-emulator -k "system-images;android-30;google_apis;x86" --device "pixel"
            echo "Init emulator"
            emulator -avd test-emulator -no-window -no-audio -no-boot-anim -no-snapshot -gpu swiftshader_indirect -accel off &
            EMULATOR_PID=$!
            echo "Waiting emulator started"
            sleep 120
            adb wait-for-device
            adb devices

            # Instalar el driver de UIAutomator2 y validar dependencias con Appium Doctor
            echo "Instalando el driver de UIAutomator2..."
            appium driver install uiautomator2
            echo "Install Appium Doctor"
            sudo npm install -g appium-doctor
            appium-doctor --android

            # Arrancar Appium server con los flags requeridos
            echo "Run appium"
            nohup appium --address 127.0.0.1 --allow-cors > appium.log 2>&1 &
            sleep 30
            tail -n 20 appium.log

            echo "Validate tools"
            adb devices
            adb -s emulator-5554 get-state
            adb -s emulator-5554 shell getprop sys.boot_completed
            adb -s emulator-5554 shell getprop init.svc.bootanim

            curl http://127.0.0.1:4723/status

            # Execute Gradle
            sed -i "s/\r//" ./gradlew
            echo "Ejecutando tests con Gradle..."
            ./gradlew clean test -Denvironment=moto72 aggregate reports

            echo "Close emulator"
            kill $EMULATOR_PID
      - store_test_results:
          path: target/site/serenity
          when: always
          paths:
            - "*.xml"
      - store_artifacts:
          path: target/site/serenity
          when: always

workflows:
  version: 2
  setup-and-test:
    jobs:
      - setup-tools